// Generated by Dagger (https://dagger.dev).
package com.atomtesttask.citylist.di;

import com.atomtesttask.citylist.navigation.FeatureCityListApi;
import com.atomtesttask.citylist.navigation.FeatureCityListImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NavigationModule_ProviderFeatureFactory implements Factory<FeatureCityListApi> {
  private final NavigationModule module;

  private final Provider<FeatureCityListImpl> implProvider;

  public NavigationModule_ProviderFeatureFactory(NavigationModule module,
      Provider<FeatureCityListImpl> implProvider) {
    this.module = module;
    this.implProvider = implProvider;
  }

  @Override
  public FeatureCityListApi get() {
    return providerFeature(module, implProvider.get());
  }

  public static NavigationModule_ProviderFeatureFactory create(NavigationModule module,
      Provider<FeatureCityListImpl> implProvider) {
    return new NavigationModule_ProviderFeatureFactory(module, implProvider);
  }

  public static FeatureCityListApi providerFeature(NavigationModule instance,
      FeatureCityListImpl impl) {
    return Preconditions.checkNotNullFromProvides(instance.providerFeature(impl));
  }
}
